{"ast":null,"code":"import _asyncToGenerator from \"/home/alexandre/angular-workspace/client-vol/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment as env } from '../environments/environment';\nexport function initializer(keycloak) {\n  return () => {\n    return new Promise( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (resolve, reject) {\n        try {\n          yield keycloak.init({\n            config: {\n              url: env.keycloak.issuer,\n              realm: env.keycloak.realm,\n              clientId: env.keycloak.clientId\n            },\n            loadUserProfileAtStartUp: false,\n            initOptions: {\n              onLoad: 'login-required',\n              checkLoginIframe: true\n            },\n            bearerExcludedUrls: []\n          });\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  };\n}","map":{"version":3,"sources":["/home/alexandre/angular-workspace/client-vol/src/app/initializer.service.ts"],"names":["environment","env","initializer","keycloak","Promise","resolve","reject","init","config","url","issuer","realm","clientId","loadUserProfileAtStartUp","initOptions","onLoad","checkLoginIframe","bearerExcludedUrls","error"],"mappings":";AAAA,SAASA,WAAW,IAAIC,GAAxB,QAAmC,6BAAnC;AACA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAClC,SAAO,MAAM;AACT,WAAO,IAAIC,OAAJ;AAAA,mCAAY,WAAOC,OAAP,EAAgBC,MAAhB,EAA2B;AAC1C,YAAI;AACA,gBAAMH,QAAQ,CAACI,IAAT,CAAc;AAChBC,YAAAA,MAAM,EAAE;AACJC,cAAAA,GAAG,EAAER,GAAG,CAACE,QAAJ,CAAaO,MADd;AAEJC,cAAAA,KAAK,EAAEV,GAAG,CAACE,QAAJ,CAAaQ,KAFhB;AAGJC,cAAAA,QAAQ,EAAEX,GAAG,CAACE,QAAJ,CAAaS;AAHnB,aADQ;AAMhBC,YAAAA,wBAAwB,EAAE,KANV;AAOhBC,YAAAA,WAAW,EAAE;AACTC,cAAAA,MAAM,EAAE,gBADC;AAETC,cAAAA,gBAAgB,EAAE;AAFT,aAPG;AAWhBC,YAAAA,kBAAkB,EAAE;AAXJ,WAAd,CAAN;AAaAZ,UAAAA,OAAO;AACV,SAfD,CAgBA,OAAOa,KAAP,EAAc;AACVZ,UAAAA,MAAM,CAACY,KAAD,CAAN;AACH;AACJ,OApBM;;AAAA;AAAA;AAAA;AAAA,QAAP;AAqBH,GAtBD;AAuBH","sourcesContent":["import { environment as env } from '../environments/environment';\nexport function initializer(keycloak) {\n    return () => {\n        return new Promise(async (resolve, reject) => {\n            try {\n                await keycloak.init({\n                    config: {\n                        url: env.keycloak.issuer,\n                        realm: env.keycloak.realm,\n                        clientId: env.keycloak.clientId\n                    },\n                    loadUserProfileAtStartUp: false,\n                    initOptions: {\n                        onLoad: 'login-required',\n                        checkLoginIframe: true\n                    },\n                    bearerExcludedUrls: []\n                });\n                resolve();\n            }\n            catch (error) {\n                reject(error);\n            }\n        });\n    };\n}\n"]},"metadata":{},"sourceType":"module"}