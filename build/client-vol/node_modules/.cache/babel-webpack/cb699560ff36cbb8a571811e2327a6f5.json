{"ast":null,"code":"import { environment as env } from '../environments/environment';\n/**export function initializer(keycloak: KeycloakService): () => Promise<any> {\n    return (): Promise<any> => {\n        return new Promise(async (resolve, reject) => {\n          try {\n            await keycloak.init({\n                config: {\n                    url: env.keycloak.issuer,\n                    realm: env.keycloak.realm,\n                    clientId: env.keycloak.clientId\n                },\n              loadUserProfileAtStartUp: false,\n              initOptions: {\n                onLoad: 'login-required',\n                checkLoginIframe: true\n              },\n              bearerExcludedUrls: []\n            });\n            resolve();\n          } catch (error) {\n            reject(error);\n          }\n        });\n    };\n}**/\n\nexport function initializer(keycloak) {\n  return () => keycloak.init({\n    config: {\n      url: env.keycloak.issuer,\n      realm: env.keycloak.realm,\n      clientId: env.keycloak.clientId\n    },\n    initOptions: {\n      onLoad: 'login-required',\n      checkLoginIframe: true\n    }\n  });\n}","map":{"version":3,"sources":["/home/alexandre/angular-workspace/client-vol/src/app/initializer.service.ts"],"names":["environment","env","initializer","keycloak","init","config","url","issuer","realm","clientId","initOptions","onLoad","checkLoginIframe"],"mappings":"AAAA,SAASA,WAAW,IAAIC,GAAxB,QAAmC,6BAAnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAClC,SAAO,MAAMA,QAAQ,CAACC,IAAT,CAAc;AACvBC,IAAAA,MAAM,EAAE;AACJC,MAAAA,GAAG,EAAEL,GAAG,CAACE,QAAJ,CAAaI,MADd;AAEJC,MAAAA,KAAK,EAAEP,GAAG,CAACE,QAAJ,CAAaK,KAFhB;AAGJC,MAAAA,QAAQ,EAAER,GAAG,CAACE,QAAJ,CAAaM;AAHnB,KADe;AAMvBC,IAAAA,WAAW,EAAE;AACTC,MAAAA,MAAM,EAAE,gBADC;AAETC,MAAAA,gBAAgB,EAAE;AAFT;AANU,GAAd,CAAb;AAWH","sourcesContent":["import { environment as env } from '../environments/environment';\n/**export function initializer(keycloak: KeycloakService): () => Promise<any> {\n    return (): Promise<any> => {\n        return new Promise(async (resolve, reject) => {\n          try {\n            await keycloak.init({\n                config: {\n                    url: env.keycloak.issuer,\n                    realm: env.keycloak.realm,\n                    clientId: env.keycloak.clientId\n                },\n              loadUserProfileAtStartUp: false,\n              initOptions: {\n                onLoad: 'login-required',\n                checkLoginIframe: true\n              },\n              bearerExcludedUrls: []\n            });\n            resolve();\n          } catch (error) {\n            reject(error);\n          }\n        });\n    };\n}**/\nexport function initializer(keycloak) {\n    return () => keycloak.init({\n        config: {\n            url: env.keycloak.issuer,\n            realm: env.keycloak.realm,\n            clientId: env.keycloak.clientId\n        },\n        initOptions: {\n            onLoad: 'login-required',\n            checkLoginIframe: true\n        }\n    });\n}\n"]},"metadata":{},"sourceType":"module"}